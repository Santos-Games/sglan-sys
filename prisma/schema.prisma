generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  loginAt       DateTime @default(now())
  logoutAt      DateTime?
  token         String? 
  amountDue     Float    @default(0) 
  minutesUsed   Int      @default(0) // minutos usados nesta sessão
  ip            String? 
  deviceName    String? 
  macAddress    String? 
  payments      Payment[]
  lastHeartbeat DateTime? // <-- novo campo
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  lastLogin     DateTime? @default(now())
  canLogin      Boolean  @default(true)
  jwtExpiration Int      @default(3600)
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  payments      Payment[]
  auditLogs     AuditLog[]
  hoursBalance  Float    @default(0)
  moneyBalance  Float    @default(0)
  negativeHoursLimit Float @default(0) // Limite de crédito negativo em horas
  minutesBalance Int     @default(0) // minutos acumulados não cobrados
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  action    String
  details   String?
  createdAt DateTime @default(now())
  ip        String?
}

model Payment {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  amount        Float
  paymentMethod String
  paidAt        DateTime @default(now())
  session       Session? @relation(fields: [sessionId], references: [id])
  sessionId     Int?
}
